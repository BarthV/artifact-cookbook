{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Artifact-cookbook","tagline":"Provides your cookbooks with the Artifact Deploy LWRP","google":"","body":"# Artifact cookbook\r\n\r\nProvides your cookbooks with the Artifact Deploy LWRP\r\n\r\n# Requirements\r\n\r\n* Chef 10\r\n\r\n# Resources / Providers\r\n\r\n## artifact_deploy\r\n\r\nDeploys a collection of build artifacts packaged into a tar ball. Artifacts are extracted from\r\nthe package and managed in a deploy directory in the same fashion you've seen in the Opscode\r\ndeploy resource or Capistrano's default deploy strategy.\r\n\r\n### Actions\r\nAction  | Description                 | Default\r\n------- |-------------                |---------\r\ndeploy  | Deploy the artifact package | Yes\r\n\r\n### Attributes\r\nAttribute           | Description                                                                          |Type     | Default\r\n---------           |-------------                                                                         |-----    |--------\r\nartifact_name       | Name of the artifact package to deploy                                               | String  | name\r\nartifact_location   | URL, local path, or Maven identifier of the artifact package to download             | String  |\r\ndeploy_to           | Deploy directory where releases are stored and linked                                | String  |\r\nversion             | Version of the artifact being deployed                                               | String  |\r\nowner               | Owner of files created and modified                                                  | String  |\r\ngroup               | Group of files created and modified                                                  | String  |\r\nenvironment         | An environment hash used by resources within the provider                            | Hash    | Hash.new\r\nsymlinks            | A hash that maps files in the shared directory to their paths in the current release | Hash    | Hash.new\r\nshared_directories  | Directories to be created in the shared folder                                       | Array   | %w{ log pids }\r\nbefore_extract      | A proc containing resources to be executed before the artifact package is extracted  | Proc    |\r\nbefore_migrate      | A proc containing resources to be executed before the migration Proc                 | Proc    |\r\nafter_migrate       | A proc containing resources to be executed after the migration Proc                  | Proc    |\r\nmigrate             | A proc containing resources to be executed during the migration stage                | Proc    |\r\nrestart_proc        | A proc containing resources to be executed at the end of a successful deploy         | Proc    |\r\nbefore_symlink      | A proc containing resources to be executed before the symlinks are created           | Proc    |\r\nforce               | Forcefully deploy an artifact even if the artifact has already been deployed         | Boolean | false\r\nshould_migrate      | Notify the provider if it should perform application migrations                      | Boolean | false\r\nkeep                | Specify a number of artifacts deployments to keep on disk                            | Integer | 2\r\n\r\n### Nexus Usage\r\n\r\nIn order to deploy an artifact from a Nexus repository, you must first create\r\nan [encrypted data bag](http://wiki.opscode.com/display/chef/Encrypted+Data+Bags) that contains\r\nthe credentials for your Nexus repository.\r\n\r\n    knife data bag create artifact nexus -c <your chef config> --secret-file=<your secret file>\r\n\r\nYour data bag should look like the following:\r\n\r\n    {\r\n      \"id\": \"nexus\",\r\n      \"your_chef_environment\": {\r\n        \"username\": \"nexus_user\",\r\n        \"password\": \"nexus_user_password\",\r\n        \"url\": \"http://nexus.yourcompany.com:8081/nexus/\",\r\n        \"repository\": \"your_repository\"\r\n      }\r\n    }\r\n\r\nAfter your encrypted data bag is setup you can use Maven identifiers\r\nfor your artifact_location. If many environments share the same configuration,\r\nyou can use \"*\" as a wildcard environment name.\r\n\r\n### Examples\r\n\r\n##### Deploying a Rails application\r\n\r\n    artifact_deploy \"pvpnet\" do\r\n      version \"1.0.0\"\r\n      artifact_location \"https://artifacts.riotgames.com/pvpnet-1.0.0.tar.gz\"\r\n      deploy_to \"/srv/pvpnet\"\r\n      owner \"riot\"\r\n      group \"riot\"\r\n      environment { 'RAILS_ENV' => 'production' }\r\n      shared_directories %w{ data log pids system vendor_bundle assets }\r\n\r\n      before_migrate Proc.new {\r\n        template \"#{shared_path}/database.yml\" do\r\n          source \"database.yml.erb\"\r\n          owner node[:merlin][:owner]\r\n          group node[:merlin][:group]\r\n          mode \"0644\"\r\n          variables(\r\n            :environment => environment,\r\n            :options => database_options\r\n          )\r\n        end\r\n        \r\n        execute \"bundle install --local --path=vendor/bundle --without test development cucumber --binstubs\" do\r\n          environment { 'RAILS_ENV' => 'production' }\r\n          user \"riot\"\r\n          group \"riot\"\r\n        end\r\n      }\r\n\r\n      migrate Proc.new {\r\n        execute \"bundle exec rake db:migrate\" do\r\n          environment { 'RAILS_ENV' => 'production' }\r\n          user \"riot\"\r\n          group \"riot\"\r\n        end\r\n      }\r\n\r\n      after_migrate Proc.new {\r\n        ruby_block \"remove_run_migrations\" do\r\n          block do\r\n            Chef::Log.info(\"Migrations were run, removing role[pvpnet_run_migrations]\")\r\n            node.run_list.remove(\"role[pvpnet_run_migrations]\")\r\n          end\r\n        end\r\n      }\r\n\r\n      restart_proc Proc.new {\r\n        bluepill_service 'pvpnet-unicorn' do \r\n          action :restart\r\n        end\r\n      }\r\n\r\n      keep 2\r\n      should_migrate true(node[:pvpnet][:should_migrate] ? true : false)\r\n      force (node[:pvpnet][:force_deploy] ? true : false)\r\n      action :deploy\r\n    end\r\n\r\n# Testing\r\n\r\nA sample cookbook is available in `fixtures`. You can package it with mkartifact.sh, and\r\nupload it to Nexus as artifact_cookbook:test:1.2.3:tgz.\r\n\r\nSet the artifact_test_location and artifact_test_version environment variables when running\r\nvagrant to change how they'll be provisioned. Default is 1.2.3 from a file URL.\r\n\r\n* artifact_test_location=artifact_cookbook:test:1.2.3:tgz artifact_test_version=1.2.3 bundle exec vagrant\r\n\r\n# Releasing\r\n\r\n1. Install the prerequisite gems\r\n    \r\n        $ gem install chef\r\n        $ gem install thor\r\n\r\n2. Increment the version number in the metadata.rb file\r\n\r\n3. Run the Thor release task to create a tag and push to the community site\r\n\r\n        $ thor release\r\n\r\n# License and Author\r\n\r\nAuthor:: Jamie Winsor (<jamie@vialstudios.com>)\r\n\r\nCopyright 2012, Riot Games\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n"}